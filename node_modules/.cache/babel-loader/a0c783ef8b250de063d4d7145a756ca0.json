{"ast":null,"code":"import _toConsumableArray from \"/home/gerasimos/Desktop/programming/CODE_JAVASCRIPT_REACT_GLOBE/react-globe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\nexport function geoVoronoi(data) {\n  var v = function v(data) {\n    v.delaunay = null;\n    v._data = data;\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      var temp = v._data.map(function (d) {\n        return [v._vx(d), v._vy(d), d];\n      }).filter(function (d) {\n        return isFinite(d[0] + d[1]);\n      });\n      v.points = temp.map(function (d) {\n        return [d[0], d[1]];\n      });\n      v.valid = temp.map(function (d) {\n        return d[2];\n      });\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    var coll = {\n      type: \"FeatureCollection\",\n      features: []\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach(function (poly, i) {\n      return coll.features.push({\n        type: \"Feature\",\n        geometry: !poly ? null : {\n          type: \"Polygon\",\n          coordinates: [[].concat(_toConsumableArray(poly), [poly[0]]).map(function (i) {\n            return v.delaunay.centers[i];\n          })]\n        },\n        properties: {\n          site: v.valid[i],\n          sitecoordinates: v.points[i],\n          neighbours: v.delaunay.neighbors[i] // not part of the public API\n        }\n      });\n    });\n\n    if (v.valid.length === 1) coll.features.push({\n      type: \"Feature\",\n      geometry: {\n        type: \"Sphere\"\n      },\n      properties: {\n        site: v.valid[0],\n        sitecoordinates: v.points[0],\n        neighbours: []\n      }\n    });\n    return coll;\n  };\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles.map(function (tri, index) {\n        tri = tri.map(function (i) {\n          return v.points[i];\n        });\n        tri.center = v.delaunay.centers[index];\n        return tri;\n      }).filter(function (tri) {\n        return excess(tri) > 0;\n      }).map(function (tri) {\n        return {\n          type: \"Feature\",\n          properties: {\n            circumcenter: tri.center\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [[].concat(_toConsumableArray(tri), [tri[0]])]\n          }\n        };\n      })\n    };\n  };\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    var _distances = v.delaunay.edges.map(function (e) {\n        return geoDistance(v.points[e[0]], v.points[e[1]]);\n      }),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map(function (e, i) {\n        return {\n          type: \"Feature\",\n          properties: {\n            source: v.valid[e[0]],\n            target: v.valid[e[1]],\n            length: _distances[i],\n            urquhart: !!_urquart[i]\n          },\n          geometry: {\n            type: \"LineString\",\n            coordinates: [v.points[e[0]], v.points[e[1]]]\n          }\n        };\n      })\n    };\n  };\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map(function (e) {\n        return [v.points[e[0]], v.points[e[1]]];\n      })\n    };\n  };\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    var _v$delaunay = v.delaunay,\n      centers = _v$delaunay.centers,\n      polygons = _v$delaunay.polygons;\n    var coordinates = [];\n    var _iterator = _createForOfIteratorHelper(polygons),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var p = _step.value;\n        if (!p) continue;\n        for (var n = p.length, p0 = p[n - 1], p1 = p[0], i = 0; i < n; p0 = p1, p1 = p[++i]) {\n          if (p1 > p0) {\n            coordinates.push([centers[p0], centers[p1]]);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates: coordinates\n    };\n  };\n  v._found = undefined;\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius) return v._found;\n  };\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    var hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0 ? null : {\n      type: \"Polygon\",\n      coordinates: [[].concat(_toConsumableArray(hull.map(function (i) {\n        return points[i];\n      })), [points[hull[0]]])]\n    };\n  };\n  return data ? v(data) : v;\n}","map":null,"metadata":{},"sourceType":"module"}